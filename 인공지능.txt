import torch
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim

import matplotlib.pyplot as plt
import numpy as np

# 데이터 변환
transform = transforms.Compose([
    transforms.ToTensor(),  # 텐서로 변환
    transforms.Normalize((0.4914, 0.4822, 0.4465),
                         (0.2023, 0.1994, 0.2010))  # 정규화
])

# CIFAR-10 dataset 로드
train_dataset = datasets.CIFAR10(root = './data',
                                 train = True,
                                 download = True,
                                 transform = transform)
test_dataset = datasets.CIFAR10(root = './data',
                                train = False,
                                download = True,
                                transform = transform)

# 데이터 로더 생성
train_loader = DataLoader(train_dataset, batch_size = 128,
                          shuffle = True, num_workers = 2)
test_loader  = DataLoader(test_dataset, batch_size = 100,
                          shuffle = False, num_workers = 2)

# BasicBlock 정의
class BasicBlock(nn.Module):
    def __init__(self, in_planes, planes, stride = 1):
        super(BasicBlock, self).__init__()
        self.conv1 = nn.Conv2d(in_planes, planes,
                               kernel_size = 3,
                               stride = stride,
                               padding = 1,
                               bias = False)
        self.bn1 = nn.BatchNorm2d(planes)

        self.conv2 = nn.Conv2d(planes, planes,
                               kernel_size = 3,
                               stride = 1,
                               padding = 1,
                               bias = False)
        self.bn2 = nn.BatchNorm2d(planes)

        self.shortcut = nn.Sequential()
        if stride != 1 or in_planes != planes:
            self.shortcut = nn.Sequential(
                nn.Conv2d(in_planes, planes,
                          kernel_size = 1,
                          stride = stride,
                          bias = False),
                nn.BatchNorm2d(planes)
            )

    def forward(self, x):
        out = F.relu(self.bn1(self.conv1(x)))
        out = self.bn2(self.conv2(out))
        out += self.shortcut(x)
        out = F.relu(out)
        return out

# ResNet 클래스 정의
class ResNet(nn.Module):
    def __init__(self, block, num_blocks, num_classes=10):
        super(ResNet, self).__init__()
        self.in_planes = 64

        self.conv1 = nn.Conv2d(3, 64, kernel_size = 3, stride = 1,
                               padding = 1, bias = False)
        self.bn1 = nn.BatchNorm2d(64)
        self.layer1 = self._make_layer(block,  64, num_blocks[0], stride = 1)
        self.layer2 = self._make_layer(block, 128, num_blocks[1], stride = 2)
        self.layer3 = self._make_layer(block, 256, num_blocks[2], stride = 2)
        self.layer4 = self._make_layer(block, 512, num_blocks[3], stride = 2)
        self.linear = nn.Linear(512, num_classes)

    def _make_layer(self, block, planes, num_blocks, stride):
        strides = [stride] + [1] * (num_blocks - 1)
        layers = []
        for stride in strides:
            layers.append(block(self.in_planes, planes, stride))
            self.in_planes = planes
        return nn.Sequential(*layers)

    def forward(self, x):
        out = F.relu(self.bn1(self.conv1(x)))
        out = self.layer1(out)
        out = self.layer2(out)
        out = self.layer3(out)
        out = self.layer4(out)
        out = F.avg_pool2d(out, 4)
        out = out.view(out.size(0), -1)
        out = self.linear(out)
        return out

# ResNet34 모델 생성
def ResNet34():
    return ResNet(BasicBlock, [3, 4, 6, 3])

# 모델 초기화 및 디바이스 설정
model = ResNet34()
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = model.to(device)

# 학습 함수 정의
def train():
    model.train()
    running_loss = 0.0
    correct = 0
    total = 0
    for batch_idx, (inputs, targets) in enumerate(train_loader):
        inputs, targets = inputs.to(device), targets.to(device)

        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, targets)

        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        _, predicted = outputs.max(1)
        total += targets.size(0)
        correct += predicted.eq(targets).sum().item()

        if (batch_idx + 1) % log_interval == 0:
            avg_loss = running_loss / log_interval
            accuracy = 100. * correct / total
            print(f'Step [{batch_idx+1}/{len(train_loader)}], \
                    Loss: {avg_loss:.4f}, \
                    Accuracy: {accuracy:.2f}%')

            train_losses.append(avg_loss)
            train_accuracies.append(accuracy)

            running_loss = 0.0
            correct = 0
            total = 0

# 테스트 함수
def test():
    model.eval()
    correct = 0
    total = 0
    with torch.no_grad():
        for inputs, targets in test_loader:
            inputs, targets = inputs.to(device), targets.to(device)
            outputs = model(inputs)
            _, predicted = outputs.max(1)
            total += targets.size(0)
            correct += predicted.eq(targets).sum().item()
    accuracy = 100. * correct / total
    print(f'Test Accuracy: {accuracy:.2f}%')
    return accuracy

def infer_sample_images(model, num_samples = 5, title='Model Inference'):
    model.eval()
    sample_loader = DataLoader(test_dataset, batch_size = num_samples, shuffle = True)
    dataiter = iter(sample_loader)
    images, labels = next(dataiter)
    images, labels = images.to(device), labels.to(device)
    outputs = model(images)
    _, predicted = outputs.max(1)

    images = images.cpu().numpy()
    fig, axes = plt.subplots(1, num_samples, figsize=(num_samples * 3, 3))
    for idx in range(num_samples):
        image = images[idx]
        image = np.transpose(image, (1, 2, 0))
        mean = np.array([0.4914, 0.4822, 0.4465])
        std = np.array([0.2023, 0.1994, 0.2010])
        image = std * image + mean
        image = np.clip(image, 0, 1)
        axes[idx].imshow(image)
        axes[idx].set_title(f'Label: {labels[idx].item()}\nPred: {predicted[idx].item()}')
        axes[idx].axis('off')
    plt.suptitle(title)
    plt.show()

print("Initialized model inference:")
infer_sample_images(model, title='Untrained Model Inference')

# 손실 함수와 옵티마이저 정의
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001, betas=(0.9, 0.999), weight_decay=5e-4)

num_epochs = 10  # epoch 설정
log_interval = 100  # log를 출력할 step 간격

# loss과 정확도를 저장할 list
train_losses = []
train_accuracies = []
test_accuracies = []

# 학습 진행
for epoch in range(1, num_epochs + 1):
    print(f'\nEpoch {epoch}/{num_epochs}')
    train()
    test_accuracy = test()
    test_accuracies.append(test_accuracy)

# 손실 그래프 그리기
plt.figure(figsize=(10,5))
plt.plot(range(len(train_losses)), train_losses, label='Training Loss')
plt.xlabel('Step')
plt.ylabel('Loss')
plt.title('Training Loss over Steps')
plt.legend()
plt.show()

# 학습된 모델로 추론
print("\nTrained model inference:")
infer_sample_images(model, title='Trained Model Inference')
